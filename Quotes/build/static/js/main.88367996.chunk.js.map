{"version":3,"sources":["serviceWorker.js","API/api-call.js","quotes/quotes.js","quotes/loader.js","quotes/single-quotes.js","index.js"],"names":["Boolean","window","location","hostname","match","APICalling","a","axios","get","Quotes","quoteText","quoteAuthor","fbShareHandler","twitterShareHandler","quoteHandler","className","id","onClick","Loader","SingleQuote","useState","loading","quote","setQuote","quoteDataFromAPI","then","res","data","catch","err","useEffect","tweetURL","open","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6DCVSC,EANC,uCAAG,sBAAAC,EAAA,sEACLC,IAAMC,IAClB,+GAFiB,mFAAH,qDC+BDC,EA/BA,SAAC,GAMT,IALNC,EAKK,EALLA,UACAC,EAIK,EAJLA,YACAC,EAGK,EAHLA,eACAC,EAEK,EAFLA,oBACAC,EACK,EADLA,aAEA,OACC,yBAAKC,UAAU,kBAAkBC,GAAG,mBAEnC,yBAAKD,UAAU,cACd,uBAAGA,UAAU,sBACb,0BAAMC,GAAG,SAASN,IAGnB,yBAAKK,UAAU,gBACd,2BAAIJ,IAEL,yBAAKI,UAAU,gBACd,4BAAQA,UAAU,iBAAiBC,GAAG,SACrC,uBAAGD,UAAU,sBAAsBE,QAASJ,IAC5C,uBAAGE,UAAU,uBAAuBE,QAASL,KAE9C,4BAAQI,GAAG,YAAYC,QAASH,GAAhC,gBCrBWI,EAFA,kBAAM,yBAAKH,UAAU,SAASC,GAAG,UCiEjCG,EA7DK,WAAM,MAECC,mBAAS,CAClCV,UAAW,GACXC,YAAa,GACbU,SAAS,IALe,mBAElBC,EAFkB,KAEXC,EAFW,KASnBC,EAAmB,WACxBD,EAAS,CAAEF,SAAS,IACpBhB,IACEoB,MAAK,SAACC,GACNH,EAAS,CACRb,UAAWgB,EAAIC,KAAKjB,UACpBC,YAAae,EAAIC,KAAKhB,YACtBU,SAAS,OAGVO,OAAM,SAACC,GAAD,OAASN,EAAS,CAAEF,SAAS,QAsBtCS,qBAAU,WACTN,MACE,IA3CsB,IA8CjBH,EAAoCC,EAApCD,QAASX,EAA2BY,EAA3BZ,UAAWC,EAAgBW,EAAhBX,YAE5B,OAAOU,EACN,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACCX,UAAWA,EACXC,YAAaA,EACbE,oBA1B0B,WAAO,IAC1BH,EAA2BY,EAA3BZ,UAAWC,EAAgBW,EAAhBX,YACboB,EAAQ,gDAA4CrB,EAA5C,cAA2DC,GACzEV,OAAO+B,KAAKD,EAAU,WAwBrBjB,aAhCmB,WACpBU,KAgCCZ,eArBqB,WAEtBX,OAAO+B,KADI,uEACQ,cCtCrBC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SL0HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdd,OAAM,SAAAe,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.88367996.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst APICalling = async () => {\n\treturn await axios.get(\n\t\t\"https://cors-anywhere.herokuapp.com/https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en\"\n\t);\n};\n\nexport default APICalling;\n","import React from \"react\";\n\nconst Quotes = ({\n\tquoteText,\n\tquoteAuthor,\n\tfbShareHandler,\n\ttwitterShareHandler,\n\tquoteHandler,\n}) => {\n\treturn (\n\t\t<div className=\"quote-container\" id=\"quote-container\">\n\t\t\t{/* Quote Text */}\n\t\t\t<div className=\"quote-text\">\n\t\t\t\t<i className=\"fas fa-quote-left\"></i>\n\t\t\t\t<span id=\"quote\">{quoteText}</span>\n\t\t\t</div>\n\t\t\t{/* Quote Author */}\n\t\t\t<div className=\"quote-author\">\n\t\t\t\t<p>{quoteAuthor}</p>\n\t\t\t</div>\n\t\t\t<div className=\"quote-button\">\n\t\t\t\t<button className=\"twitter-button\" id=\"tweet\">\n\t\t\t\t\t<i className=\"fab fa-twitter icon\" onClick={twitterShareHandler}></i>\n\t\t\t\t\t<i className=\"fab fa-facebook icon\" onClick={fbShareHandler}></i>\n\t\t\t\t</button>\n\t\t\t\t<button id=\"new-quote\" onClick={quoteHandler}>\n\t\t\t\t\tNew Quote\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Quotes;\n","import React from \"react\";\n\nconst Loader = () => <div className=\"loader\" id=\"load\"></div>;\n\nexport default Loader;\n","import React, { useState, useEffect } from \"react\";\nimport \"./../style/style.css\";\nimport APICalling from \"../API/api-call\";\nimport Quotes from \"./quotes\";\nimport Loader from \"./loader\";\n\nconst SingleQuote = () => {\n\t// State management\n\tconst [quote, setQuote] = useState({\n\t\tquoteText: \"\",\n\t\tquoteAuthor: \"\",\n\t\tloading: false,\n\t});\n\n\t// API Handler\n\tconst quoteDataFromAPI = () => {\n\t\tsetQuote({ loading: true });\n\t\tAPICalling()\n\t\t\t.then((res) => {\n\t\t\t\tsetQuote({\n\t\t\t\t\tquoteText: res.data.quoteText,\n\t\t\t\t\tquoteAuthor: res.data.quoteAuthor,\n\t\t\t\t\tloading: false,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => setQuote({ loading: false }));\n\t};\n\n\t// Button Handler\n\tconst quoteHandler = () => {\n\t\tquoteDataFromAPI();\n\t};\n\n\t// Twitter Share Handler\n\tconst twitterShareHandler = () => {\n\t\tconst { quoteText, quoteAuthor } = quote;\n\t\tconst tweetURL = `https://twitter.com/intent/tweet?text=${quoteText} - ${quoteAuthor}`;\n\t\twindow.open(tweetURL, \"_blank\");\n\t};\n\n\t// Facebook Shere Handler\n\tconst fbShareHandler = () => {\n\t\tconst fbURL = `https://www.facebook.com/sharer.php?u=http%3A%2F%2Flocalhost:3000%2F`;\n\t\twindow.open(fbURL, \"_blank\");\n\t};\n\n\t// Shwoing component during render\n\tuseEffect(() => {\n\t\tquoteDataFromAPI();\n\t}, []);\n\n\t// destructuring data from object\n\tconst { loading, quoteText, quoteAuthor } = quote;\n\n\treturn loading ? (\n\t\t<Loader />\n\t) : (\n\t\t<Quotes\n\t\t\tquoteText={quoteText}\n\t\t\tquoteAuthor={quoteAuthor}\n\t\t\ttwitterShareHandler={twitterShareHandler}\n\t\t\tquoteHandler={quoteHandler}\n\t\t\tfbShareHandler={fbShareHandler}\n\t\t/>\n\t);\n};\n\nexport default SingleQuote;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SingleQuote from \"./quotes/single-quotes\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<SingleQuote />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}